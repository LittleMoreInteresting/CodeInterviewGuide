package BinaryTree

type TreeNode struct {
	Value int
	Left  *TreeNode
	Right *TreeNode
}

func New() *TreeNode {
	return &TreeNode{}
}

/**
1分别用递归和非递归方式实现二叉树先序、中序和后序遍历
2打印二叉树的边界节点
3如何较为直观地打印二叉树
4二叉树的序列化和反序列化
5遍历二叉树的神级方法
6在二叉树中找到累加和为指定值的最长路径长度
7找到二叉树中的最大搜索二叉子树
8找到二叉树中符合搜索二叉树条件的最大拓扑结构
9二叉树的按层打印与ZigZag打印
10调整搜索二叉树中两个错误的节点
11判断t1树是否包含t2树全部的拓扑结构
12判断t1树中是否有与t2树拓扑结构完全相同的子树
13判断二叉树是否为平衡二叉树
14根据后序数组重建搜索二叉树
15判断一棵二叉树是否为搜索二叉树和完全二叉树
16通过有序数组生成平衡搜索二叉树
17在二叉树中找到一个节点的后继节点
在二叉树中找到两个节点的最近公共祖先
Tarjan算法与并查集解决二叉树节点间最近公共祖先的批量查询问题
二叉树节点间的最大距离问题
先序、中序和后序数组两两结合重构二叉树
通过先序和中序数组生成后序数组
统计和生成所有不同的二叉树
统计完全二叉树的节点数
*/
